.\" Pipe this output to groff -Tutf8 | less
.\"
.mso an.tmac
.TH "OCAMLFORMAT" 1 "" "Ocamlformat 0.19.0" "Ocamlformat Manual"
.\" Disable hyphenation and ragged-right
.nh
.ad l
.SH NAME
.P
ocamlformat \N'45' A tool to format OCaml code\N'46'
.SH SYNOPSIS
.P
\fBocamlformat\fR [\fIOPTION\fR]\N'46'\N'46'\N'46' [\fISRC\fR]\N'46'\N'46'\N'46'
.SH DESCRIPTION
.P
\fBocamlformat\fR automatically formats OCaml code\N'46'
.SH OPTIONS (CODE FORMATTING STYLE)
.P
Unless otherwise noted, any option \fB\N'45'\N'45'\fR\fIoption\fR\fB=\fR\fIVAL\fR detailed in this section can be set in many ways, its value is determined in the following order (of increasing priority): the default value is used if no other value is specified\N'46' The value of a boolean option \fB\N'45'\N'45'foo\fR or \fB\N'45'\N'45'no\N'45'foo\fR can be modified in an \fB\N'46'ocamlformat\fR configuration file with \N'39'\fBfoo = \fR{\fBtrue\fR,\fBfalse\fR}\N'39', it can be done for any other option with an \N'39'\fBoption = \fR\fIVAL\fR\N'39' line (*), or using the OCAMLFORMAT environment variable: \fBOCAMLFORMAT=\fR\fIoption\fR\fB=\fR\fIVAL\fR\fB,\fR\N'46'\N'46'\N'46'\fB,\fR\fIoption\fR\fB=\fR\fIVAL\fR, or as an optional parameter on the command line, or with a global \fB[@@@ocamlformat "\fR\fIoption\fR\fB=\fR\fIVAL\fR\fB"]\fR attribute in the processed file, or with an \fB[@@ocamlformat "\fR\fIoption\fR\fB=\fR\fIVAL\fR\fB"]\fR attribute on expression in the processed file\N'46'
.P
(*) \fB\N'46'ocamlformat\fR files in current and all ancestor directories for each input file are used, as well as the global \fBocamlformat\fR file defined in \fB$XDG_CONFIG_HOME\fR or in \fB$HOME/\N'46'config\fR if \fB$XDG_CONFIG_HOME\fR is undefined\N'46' The global \fBocamlformat\fR file has the lowest priority, then the closer the directory is to the processed file, the higher the priority\N'46' The global \fBocamlformat\fR file is only used when the option \fBenable\N'45'outside\N'45'detected\N'45'project\fR is set\N'46'
.P
If the \fBdisable\fR option is not set, an \fB\N'46'ocamlformat\N'45'ignore\fR file specifies files that OCamlFormat should ignore\N'46' Each line in an \fB\N'46'ocamlformat\N'45'ignore\fR file specifies a filename relative to the directory containing the \fB\N'46'ocamlformat\N'45'ignore\fR file\N'46' Shell\N'45'style regular expressions are supported\N'46' Lines starting with \fB#\fR are ignored and can be used as comments\N'46'
.P
If the \fBdisable\fR option is set, an \fB\N'46'ocamlformat\N'45'enable\fR file specifies files that OCamlFormat should format even when the \fBdisable\fR option is set\N'46' Each line in an \fB\N'46'ocamlformat\N'45'enable\fR file specifies a filename relative to the directory containing the \fB\N'46'ocamlformat\N'45'enable\fR file\N'46' Shell\N'45'style regular expressions are supported\N'46' Lines starting with \fB#\fR are ignored and can be used as comments\N'46'
.TP 4
\fB\N'45'\N'45'align\N'45'cases\fR
Align match/try cases vertically\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'align\N'45'constructors\N'45'decl\fR
Align type declarations vertically\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'align\N'45'variants\N'45'decl\fR
Align type variants declarations vertically\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'assignment\N'45'operator\fR=\fI{end\N'45'line|begin\N'45'line}\fR
Position of the assignment operator\N'46' \fBend\N'45'line\fR positions assignment operators (`:=` and `<\N'45'`) at the end of the line and breaks after it if the whole assignment expression does not fit on a single line\N'46' \fBbegin\N'45'line\fR positions assignment operators (`:=` and `<\N'45'`) at the beginning of the line and breaks before it if the whole assignment expression does not fit on a single line\N'46' The default value is \fBend\N'45'line\fR\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'before\N'45'in\fR=\fI{fit\N'45'or\N'45'vertical|auto}\fR
Whether the line should break before the \fIin\fR keyword of a \fIlet\fR binding\N'46' \fBfit\N'45'or\N'45'vertical\fR will always break the line before the \fIin\fR keyword if the whole \fIlet\fR binding does not fit on a single line\N'46' \fBauto\fR will only break the line if the \fIin\fR keyword does not fit on the previous line\N'46' The default value is \fBfit\N'45'or\N'45'vertical\fR\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'cases\fR=\fI{fit|nested|toplevel|fit\N'45'or\N'45'vertical|all}\fR
Break pattern match cases\N'46' Specifying \fBfit\fR lets pattern matches break at the margin naturally\N'46' \fBnested\fR forces a break after nested or\N'45'patterns to highlight the case body\N'46' Note that with \fBnested\fR, the \fBindicate\N'45'nested\N'45'or\N'45'patterns\fR option is not needed, and so ignored\N'46' \fBtoplevel\fR forces top\N'45'level cases (i\N'46'e\N'46' not nested or\N'45'patterns) to break across lines, otherwise break naturally at the margin\N'46' \fBfit\N'45'or\N'45'vertical\fR tries to fit all or\N'45'patterns on the same line, otherwise breaks\N'46' \fBall\fR forces all pattern matches to break across lines\N'46' The default value is \fBfit\fR\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'collection\N'45'expressions\fR=\fI{fit\N'45'or\N'45'vertical|wrap}\fR
Break collection expressions (lists and arrays) elements by elements\N'46' \fBfit\N'45'or\N'45'vertical\fR vertically breaks expressions if they do not fit on a single line\N'46' \fBwrap\fR will group simple expressions and try to format them in a single line\N'46' The default value is \fBfit\N'45'or\N'45'vertical\fR\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'fun\N'45'decl\fR=\fI{wrap|fit\N'45'or\N'45'vertical|smart}\fR
Style for function declarations and types\N'46' \fBwrap\fR breaks only if necessary\N'46' \fBfit\N'45'or\N'45'vertical\fR vertically breaks arguments if they do not fit on a single line\N'46' \fBsmart\fR is like \fBfit\N'45'or\N'45'vertical\fR but try to fit arguments on their line if they fit\N'46' The default value is \fBwrap\fR\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'fun\N'45'sig\fR=\fI{wrap|fit\N'45'or\N'45'vertical|smart}\fR
Style for function signatures\N'46' \fBwrap\fR breaks only if necessary\N'46' \fBfit\N'45'or\N'45'vertical\fR vertically breaks arguments if they do not fit on a single line\N'46' \fBsmart\fR is like \fBfit\N'45'or\N'45'vertical\fR but try to fit arguments on their line if they fit\N'46' The default value is \fBwrap\fR\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'infix\fR=\fI{wrap|fit\N'45'or\N'45'vertical}\fR
Break sequence of infix operators\N'46' \fBwrap\fR will group simple expressions and try to format them in a single line\N'46' \fBfit\N'45'or\N'45'vertical\fR vertically breaks expressions if they do not fit on a single line\N'46' The default value is \fBwrap\fR\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'infix\N'45'before\N'45'func\fR
Break infix operators whose right arguments are anonymous functions specially: do not break after the operator so that the first line of the function appears docked at the end of line after the operator\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'separators\fR=\fI{after|before}\fR
Break before or after separators such as `;` in list or record expressions\N'46' \fBafter\fR breaks the expressions after the separator\N'46' \fBbefore\fR breaks the expressions before the separator\N'46' The default value is \fBafter\fR\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'sequences\fR
Force sequence expressions to break irrespective of margin\N'46' The flag is \fBset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'string\N'45'literals\fR=\fI{auto|never}\fR
Break string literals\N'46' \fBauto\fR mode breaks lines at newlines and wraps string literals at the margin\N'46' \fBnever\fR mode formats string literals as they are parsed, in particular, with escape sequences expanded\N'46' The default value is \fBauto\fR\N'46'
.TP 4
\fB\N'45'\N'45'break\N'45'struct\fR=\fI{force|natural}\fR
Break struct\N'45'end module items\N'46' \fBforce\fR will break struct\N'45'end phrases unconditionally\N'46' \fBnatural\fR will break struct\N'45'end phrases naturally at the margin\N'46' The default value is \fBforce\fR\N'46'
.TP 4
\fB\N'45'\N'45'cases\N'45'exp\N'45'indent\fR=\fICOLS\fR
Indentation of cases expressions (\fICOLS\fR columns)\N'46' See also the \fBcases\N'45'matching\N'45'exp\N'45'indent\fR and \fBnested\N'45'match\fR options\N'46' The default value is \fB4\fR\N'46' Cannot be set in attributes\N'46'
.TP 4
\fB\N'45'\N'45'cases\N'45'matching\N'45'exp\N'45'indent\fR=\fI{normal|compact}\fR
Indentation of cases right\N'45'hand sides which are `match` or `try` expressions\N'46' \fBnormal\fR indents as it would any other expression\N'46' \fBcompact\fR forces an indentation of 2, unless \fBnested\N'45'match\fR is set to \fBalign\fR and we\N'39're on the last case\N'46' The default value is \fBnormal\fR\N'46'
.TP 4
\fB\N'45'\N'45'disable\fR
Disable ocamlformat\N'46' This is used in attributes to locally disable automatic code formatting\N'46' One can also use \fB[@@@ocamlformat "enable"]\fR instead of \fB[@@@ocamlformat "disable=false"]\fR\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'disambiguate\N'45'non\N'45'breaking\N'45'match\fR
Add parentheses around matching constructs that fit on a single line\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'doc\N'45'comments\fR=\fI{after\N'45'when\N'45'possible|before\N'45'except\N'45'val|before}\fR
Doc comments position\N'46' \fBafter\N'45'when\N'45'possible\fR puts doc comments after the corresponding code\N'46' This option has no effect on variant declarations because that would change their meaning and on structures, signatures and objects for readability\N'46' \fBbefore\N'45'except\N'45'val\fR puts doc comments before the corresponding code, but puts doc comments of \fBval\fR and \fBexternal\fR declarations after the corresponding declarations\N'46' \fBbefore\fR puts comments before the corresponding code\N'46' The default value is \fBafter\N'45'when\N'45'possible\fR\N'46'
.TP 4
\fB\N'45'\N'45'doc\N'45'comments\N'45'padding\fR=\fIPADDING\fR
Add \fIPADDING\fR spaces before doc comments in type declarations\N'46' The default value is \fB2\fR\N'46'
.TP 4
\fB\N'45'\N'45'doc\N'45'comments\N'45'tag\N'45'only\fR=\fI{default|fit}\fR
Position of doc comments with only tags\N'46' \fBdefault\fR means no special treatment\N'46' \fBfit\fR puts doc comments on the same line\N'46' The default value is \fBdefault\fR\N'46'
.TP 4
\fB\N'45'\N'45'dock\N'45'collection\N'45'brackets\fR
Dock the brackets of lists, arrays and records, so that when the collection does not fit on a single line the brackets are opened on the preceding line and closed on the following line\N'46' The flag is \fBset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'exp\N'45'grouping\fR=\fI{parens|preserve}\fR
Style of expression grouping\N'46' \fBparens\fR groups expressions using parentheses\N'46' \fBpreserve\fR preserves the original grouping syntax (parentheses or \fIbegin\fR/\fIend\fR)\N'46' The default value is \fBparens\fR\N'46'
.TP 4
\fB\N'45'\N'45'extension\N'45'indent\fR=\fICOLS\fR
Indentation of items inside extension nodes (\fICOLS\fR columns)\N'46' The default value is \fB2\fR\N'46'
.TP 4
\fB\N'45'\N'45'field\N'45'space\fR=\fI{loose|tight|tight\N'45'decl}\fR
Whether or not to use a space between a field name and the rhs\N'46' This option affects records and objects\N'46' \fBloose\fR does\N'46' \fBtight\fR does not use a space between a field name and the punctuation symbol (`:` or `=`)\N'46' \fBtight\N'45'decl\fR is \fBtight\fR for declarations and \fBloose\fR for instantiations\N'46' The default value is \fBloose\fR\N'46'
.TP 4
\fB\N'45'\N'45'function\N'45'indent\fR=\fICOLS\fR
Indentation of function cases (\fICOLS\fR columns)\N'46' The default value is \fB2\fR\N'46'
.TP 4
\fB\N'45'\N'45'function\N'45'indent\N'45'nested\fR=\fI{never|always|auto}\fR
Whether the \fBfunction\N'45'indent\fR parameter should be applied even when in a sub\N'45'block\N'46' \fBnever\fR only applies \fBfunction\N'45'indent\fR if the function block starts a line\N'46' \fBalways\fR always apply \fBfunction\N'45'indent\fR\N'46' \fBauto\fR applies \fBfunction\N'45'indent\fR when seen fit\N'46' The default value is \fBnever\fR\N'46'
.TP 4
\fB\N'45'\N'45'if\N'45'then\N'45'else\fR=\fI{compact|fit\N'45'or\N'45'vertical|keyword\N'45'first|k\N'45'r}\fR
If\N'45'then\N'45'else formatting\N'46' \fBcompact\fR tries to format an if\N'45'then\N'45'else expression on a single line\N'46' \fBfit\N'45'or\N'45'vertical\fR vertically breaks branches if they do not fit on a single line\N'46' \fBkeyword\N'45'first\fR formats if\N'45'then\N'45'else expressions such that the if\N'45'then\N'45'else keywords are the first on the line\N'46' \fBk\N'45'r\fR formats if\N'45'then\N'45'else expressions with parentheses that match the K&R style\N'46' The default value is \fBcompact\fR\N'46'
.TP 4
\fB\N'45'\N'45'indent\N'45'after\N'45'in\fR=\fICOLS\fR
Indentation (\fICOLS\fR columns) after `let \N'46'\N'46'\N'46' in`, unless followed by another `let`\N'46' The default value is \fB0\fR\N'46' Cannot be set in attributes\N'46'
.TP 4
\fB\N'45'\N'45'indicate\N'45'multiline\N'45'delimiters\fR=\fI{no|space|closing\N'45'on\N'45'separate\N'45'line}\fR
How to indicate that two matching delimiters live on different lines\N'46' \fB no\fR doesn\N'39't do anything special to indicate the closing delimiter\N'46' \fBspace\fR prints a space inside the delimiter to indicate the matching one is on a different line\N'46' \fB closing\N'45'on\N'45'separate\N'45'line\fR makes sure that the closing delimiter is on its own line\N'46' The default value is \fBno\fR\N'46'
.TP 4
\fB\N'45'\N'45'indicate\N'45'nested\N'45'or\N'45'patterns\fR=\fI{unsafe\N'45'no|space}\fR
Control whether or not to indicate nested or\N'45'pattern using indentation\N'46' \fBunsafe\N'45'no\fR does not indicate nested or\N'45'patterns\N'46' Warning: this can produce confusing code where a short body of a match case is visually hidden by surrounding long patterns, leading to misassociation between patterns and body expressions\N'46' \fBspace\fR starts lines of nested or\N'45'patterns with " |" rather than "| "\N'46' The default value is \fBunsafe\N'45'no\fR\N'46'
.TP 4
\fB\N'45'\N'45'infix\N'45'precedence\fR=\fI{indent|parens}\fR
Use indentation or also discretionary parentheses to explicitly disambiguate precedences of infix operators\N'46' \fBindent\fR uses indentation to explicitly disambiguate precedences of infix operators\N'46' \fBparens\fR uses parentheses to explicitly disambiguate precedences of infix operators\N'46' The default value is \fBindent\fR\N'46'
.TP 4
\fB\N'45'\N'45'leading\N'45'nested\N'45'match\N'45'parens\fR
Nested match parens formatting\N'46' The flag is \fBunset\fR by default\N'46' Cannot be set in attributes\N'46'
.TP 4
\fB\N'45'\N'45'let\N'45'and\fR=\fI{compact|sparse}\fR
Style of let_and\N'46' \fBcompact\fR will try to format `let p = e and p = e` in a single line\N'46' \fBsparse\fR will always break between them\N'46' The default value is \fBcompact\fR\N'46'
.TP 4
\fB\N'45'\N'45'let\N'45'binding\N'45'indent\fR=\fICOLS\fR
Indentation of let binding expressions (\fICOLS\fR columns) if they do not fit on a single line\N'46' The default value is \fB2\fR\N'46' Cannot be set in attributes\N'46'
.TP 4
\fB\N'45'\N'45'let\N'45'binding\N'45'spacing\fR=\fI{compact|sparse|double\N'45'semicolon}\fR
Spacing between let binding\N'46' \fBcompact\fR spacing separates adjacent let bindings in a module according to module\N'45'item\N'45'spacing\N'46' \fBsparse\fR places two open lines between a multi\N'45'line module\N'45'level let binding and the next\N'46' \fBdouble\N'45'semicolon\fR places double semicolons and an open line between a multi\N'45'line module\N'45'level let binding and the next\N'46' The default value is \fBcompact\fR\N'46'
.TP 4
\fB\N'45'\N'45'let\N'45'module\fR=\fI{compact|sparse}\fR
Module binding formatting\N'46' \fBcompact\fR does not break a line after the \fIlet module \N'46'\N'46'\N'46' =\fR and before the \fIin\fR if the module declaration does not fit on a single line\N'46' \fBsparse\fR breaks a line after \fIlet module \N'46'\N'46'\N'46' =\fR and before the \fIin\fR if the module declaration does not fit on a single line\N'46' The default value is \fBcompact\fR\N'46'
.TP 4
\fB\N'45'\N'45'line\N'45'endings\fR=\fI{lf|crlf}\fR
Line endings used\N'46' \fBlf\fR uses Unix line endings\N'46' \fBcrlf\fR uses Windows line endings\N'46' The default value is \fBlf\fR\N'46' Cannot be set in attributes\N'46'
.TP 4
\fB\N'45'm\fR \fICOLS\fR, \fB\N'45'\N'45'margin\fR=\fICOLS\fR
Format code to fit within \fICOLS\fR columns\N'46' The default value is \fB80\fR\N'46' Cannot be set in attributes\N'46'
.TP 4
\fB\N'45'\N'45'match\N'45'indent\fR=\fICOLS\fR
Indentation of match/try cases (\fICOLS\fR columns)\N'46' The default value is \fB0\fR\N'46'
.TP 4
\fB\N'45'\N'45'match\N'45'indent\N'45'nested\fR=\fI{never|always|auto}\fR
Whether the \fBmatch\N'45'indent\fR parameter should be applied even when in a sub\N'45'block\N'46' \fBnever\fR only applies \fBmatch\N'45'indent\fR if the match block starts a line\N'46' \fBalways\fR always apply \fBmatch\N'45'indent\fR\N'46' \fBauto\fR applies \fBmatch\N'45'indent\fR when seen fit\N'46' The default value is \fBnever\fR\N'46'
.TP 4
\fB\N'45'\N'45'max\N'45'indent\fR=\fICOLS\fR
Maximum offset (\fICOLS\fR columns) added to a new line in addition to the offset of the previous line\N'46' The default value is \fB68\fR\N'46' Cannot be set in attributes\N'46'
.TP 4
\fB\N'45'\N'45'module\N'45'item\N'45'spacing\fR=\fI{sparse|preserve|compact}\fR
Spacing between items of structures and signatures\N'46' \fBsparse\fR will always break a line between two items\N'46' \fBpreserve\fR will not leave open lines between one\N'45'liners of similar sorts unless there is an open line in the input\N'46' \fBcompact\fR will not leave open lines between one\N'45'liners of similar sorts\N'46' The default value is \fBsparse\fR\N'46'
.TP 4
\fB\N'45'\N'45'nested\N'45'match\fR=\fI{wrap|align}\fR
Style of a pattern\N'45'matching nested in the last case of another pattern\N'45'matching\N'46' \fBwrap\fR wraps the nested pattern\N'45'matching with parentheses and adds indentation\N'46' \fBalign\fR vertically aligns the nested pattern\N'45'matching under the encompassing pattern\N'45'matching\N'46' The default value is \fBwrap\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'align\N'45'cases\fR
Unset \fBalign\N'45'cases\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'align\N'45'constructors\N'45'decl\fR
Unset \fBalign\N'45'constructors\N'45'decl\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'align\N'45'variants\N'45'decl\fR
Unset \fBalign\N'45'variants\N'45'decl\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'break\N'45'infix\N'45'before\N'45'func\fR
Unset \fBbreak\N'45'infix\N'45'before\N'45'func\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'break\N'45'sequences\fR
Unset \fBbreak\N'45'sequences\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'disable\fR
Unset \fBdisable\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'disambiguate\N'45'non\N'45'breaking\N'45'match\fR
Unset \fBdisambiguate\N'45'non\N'45'breaking\N'45'match\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'dock\N'45'collection\N'45'brackets\fR
Unset \fBdock\N'45'collection\N'45'brackets\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'leading\N'45'nested\N'45'match\N'45'parens\fR
Unset \fBleading\N'45'nested\N'45'match\N'45'parens\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'ocp\N'45'indent\N'45'compat\fR
Unset \fBocp\N'45'indent\N'45'compat\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'parens\N'45'ite\fR
Unset \fBparens\N'45'ite\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'parse\N'45'docstrings\fR
Unset \fBparse\N'45'docstrings\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'space\N'45'around\N'45'arrays\fR
Unset \fBspace\N'45'around\N'45'arrays\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'space\N'45'around\N'45'lists\fR
Unset \fBspace\N'45'around\N'45'lists\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'space\N'45'around\N'45'records\fR
Unset \fBspace\N'45'around\N'45'records\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'space\N'45'around\N'45'variants\fR
Unset \fBspace\N'45'around\N'45'variants\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'wrap\N'45'comments\fR
Unset \fBwrap\N'45'comments\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'wrap\N'45'fun\N'45'args\fR
Unset \fBwrap\N'45'fun\N'45'args\fR\N'46'
.TP 4
\fB\N'45'\N'45'ocp\N'45'indent\N'45'compat\fR
Attempt to generate output which does not change (much) when post\N'45'processing with ocp\N'45'indent\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'parens\N'45'ite\fR
Uses parentheses around if\N'45'then\N'45'else branches that spread across multiple lines\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'parens\N'45'tuple\fR=\fI{always|multi\N'45'line\N'45'only}\fR
Parens tuple expressions\N'46' \fBalways\fR always uses parentheses around tuples\N'46' \fBmulti\N'45'line\N'45'only\fR mode will try to skip parens for single\N'45'line tuples\N'46' The default value is \fBalways\fR\N'46'
.TP 4
\fB\N'45'\N'45'parens\N'45'tuple\N'45'patterns\fR=\fI{multi\N'45'line\N'45'only|always}\fR
Parens tuple patterns\N'46' \fBmulti\N'45'line\N'45'only\fR mode will try to skip parens for single\N'45'line tuple patterns\N'46' \fBalways\fR always uses parentheses around tuples patterns\N'46' The default value is \fBmulti\N'45'line\N'45'only\fR\N'46'
.TP 4
\fB\N'45'\N'45'parse\N'45'docstrings\fR
Parse and format docstrings\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'sequence\N'45'blank\N'45'line\fR=\fI{preserve\N'45'one|compact}\fR
Blank line between expressions of a sequence\N'46' \fBpreserve\fR will keep a blank line between two expressions of a sequence if the input contains at least one\N'46' \fBcompact\fR will not keep any blank line between expressions of a sequence\N'46' The default value is \fBpreserve\N'45'one\fR\N'46'
.TP 4
\fB\N'45'\N'45'sequence\N'45'style\fR=\fI{terminator|separator|before}\fR
Style of sequence\N'46' \fBterminator\fR only puts spaces after semicolons\N'46' \fBseparator\fR puts spaces before and after semicolons\N'46' \fBbefore\fR breaks the sequence before semicolons\N'46' The default value is \fBterminator\fR\N'46'
.TP 4
\fB\N'45'\N'45'single\N'45'case\fR=\fI{compact|sparse}\fR
Style of pattern matching expressions with only a single case\N'46' \fBcompact\fR will try to format a single case on a single line\N'46' \fBsparse\fR will always break the line before a single case\N'46' The default value is \fBcompact\fR\N'46'
.TP 4
\fB\N'45'\N'45'space\N'45'around\N'45'arrays\fR
Add a space inside the delimiters of arrays\N'46' The flag is \fBset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'space\N'45'around\N'45'lists\fR
Add a space inside the delimiters of lists\N'46' The flag is \fBset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'space\N'45'around\N'45'records\fR
Add a space inside the delimiters of records\N'46' The flag is \fBset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'space\N'45'around\N'45'variants\fR
Add a space inside the delimiters of variants\N'46' The flag is \fBset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'stritem\N'45'extension\N'45'indent\fR=\fICOLS\fR
Indentation of structure items inside extension nodes (\fICOLS\fR columns)\N'46' The default value is \fB0\fR\N'46'
.TP 4
\fB\N'45'\N'45'type\N'45'decl\fR=\fI{compact|sparse}\fR
Style of type declaration\N'46' \fBcompact\fR will try to format constructors and records definition in a single line\N'46' \fBsparse\fR will always break between constructors and record fields\N'46' The default value is \fBcompact\fR\N'46'
.TP 4
\fB\N'45'\N'45'type\N'45'decl\N'45'indent\fR=\fICOLS\fR
Indentation of type declarations (\fICOLS\fR columns) if they do not fit on a single line\N'46' The default value is \fB2\fR\N'46' Cannot be set in attributes\N'46'
.TP 4
\fB\N'45'\N'45'wrap\N'45'comments\fR
Wrap comments and docstrings\N'46' Comments and docstrings are divided into paragraphs by open lines (two or more consecutive newlines), and each paragraph is wrapped at the margin\N'46' Multi\N'45'line comments with vertically\N'45'aligned asterisks on the left margin are not wrapped\N'46' Consecutive comments with both left and right margin aligned are not wrapped either\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'wrap\N'45'fun\N'45'args\fR
Style for function call\N'46' The flag is \fBset\fR by default\N'46'
.SH OPTIONS (REMOVED OPTIONS)
.TP 4
\fB\N'45'\N'45'doc\N'45'comments\N'45'val\fR=\fIVAL\fR
This option has been removed in version 0\N'46'16\N'46'0\N'46' If you are using `doc\N'45'comments\N'45'val=before` in combination with `doc\N'45'comments=before` then only `doc\N'45'comments=before` is now required to achive the same behavior\N'46' If you are using `doc\N'45'comments\N'45'val=before` in combination with `doc\N'45'comments=after` this behavior is not available anymore\N'46' If you are using `doc\N'45'comments\N'45'val=after` in combination with `doc\N'45'comments=before` please now use `doc\N'45'comments=before\N'45'except\N'45'val`\N'46' If you are using `doc\N'45'comments\N'45'val=after` in combination with `doc\N'45'comments=after` then only `doc\N'45'comments=after\N'45'when\N'45'possible` is now required to achieve the same behavior\N'46' If you are using `doc\N'45'comments\N'45'val=unset` the same behavior can now be achieved by setting `doc\N'45'comments` only\N'46'
.TP 4
\fB\N'45'\N'45'escape\N'45'chars\fR=\fIVAL\fR
This option has been removed in version 0\N'46'16\N'46'0\N'46' Concrete syntax will now always be preserved\N'46'
.TP 4
\fB\N'45'\N'45'escape\N'45'strings\fR=\fIVAL\fR
This option has been removed in version 0\N'46'16\N'46'0\N'46' Concrete syntax will now always be preserved\N'46'
.TP 4
\fB\N'45'\N'45'extension\N'45'sugar\fR=\fIVAL\fR
This option has been removed in version 0\N'46'17\N'46'0\N'46' Concrete syntax will now always be preserved\N'46'
.TP 4
\fB\N'45'\N'45'let\N'45'open\fR=\fIVAL\fR
This option has been removed in version 0\N'46'17\N'46'0\N'46' Concrete syntax will now always be preserved\N'46'
.SH OPTIONS
.TP 4
\fB\N'45'c\fR \fIVAL\fR, \fB\N'45'\N'45'config\fR=\fIVAL\fR (absent \fBOCAMLFORMAT\fR env)
Aggregate options\N'46' Options are specified as a comma\N'45'separated list of pairs: \fIoption\fR\fB=\fR\fIVAL\fR\fB,\fR\N'46'\N'46'\N'46'\fB,\fR\fIoption\fR\fB=\fR\fIVAL\fR\N'46'
.TP 4
\fB\N'45'\N'45'check\fR
Check whether the input files already are formatted\N'46' Mutually exclusive with \N'45'\N'45'inplace and \N'45'\N'45'output\N'46'
.TP 4
\fB\N'45'\N'45'comment\N'45'check\fR
Control whether to check comments and documentation comments\N'46' Unsafe to turn off\N'46' May be set in \fB\N'46'ocamlformat\fR\N'46' The flag is \fBset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'disable\N'45'conf\N'45'attrs\fR
Disable configuration in attributes\N'46'
.TP 4
\fB\N'45'\N'45'disable\N'45'conf\N'45'files\fR
Disable \N'46'ocamlformat configuration files\N'46'
.TP 4
\fB\N'45'\N'45'disable\N'45'outside\N'45'detected\N'45'project\fR
\fBWarning:\fR this option is \fBdeprecated\fR and will be removed in OCamlFormat v1\N'46'0\N'46'
.TP 4
\fB\N'45'\N'45'enable\N'45'outside\N'45'detected\N'45'project\fR
Read \fB\N'46'ocamlformat\fR config files outside the current project\N'46' The project root of an input file is taken to be the nearest ancestor directory that contains a \fB\N'46'git\fR or \fB\N'46'hg\fR or \fBdune\N'45'project\fR file\N'46' Formatting is enabled even if no \fB\N'46'ocamlformat\fR configuration file is found\N'46'
.TP 4
\fB\N'45'g\fR, \fB\N'45'\N'45'debug\fR
Generate debugging output\N'46'
.TP 4
\fB\N'45'\N'45'help\fR[=\fIFMT\fR] (default=auto)
Show this help in format \fIFMT\fR\N'46' The value \fIFMT\fR must be one of `auto\N'39', `pager\N'39', `groff\N'39' or `plain\N'39'\N'46' With `auto\N'39', the format is `pager` or `plain\N'39' whenever the \fBTERM\fR env var is `dumb\N'39' or undefined\N'46'
.TP 4
\fB\N'45'i\fR, \fB\N'45'\N'45'inplace\fR
Format in\N'45'place, overwriting input file(s)\N'46'
.TP 4
\fB\N'45'\N'45'ignore\N'45'invalid\N'45'option\fR
Ignore invalid options (e\N'46'g\N'46' in \N'46'ocamlformat)\N'46'
.TP 4
\fB\N'45'\N'45'impl\fR
Parse file with unrecognized extension as an implementation\N'46'
.TP 4
\fB\N'45'\N'45'intf\fR
Parse file with unrecognized extension as an interface\N'46'
.TP 4
\fB\N'45'\N'45'margin\N'45'check\fR
Emit a warning if the formatted output exceeds the margin\N'46'
.TP 4
\fB\N'45'n\fR \fIN\fR, \fB\N'45'\N'45'max\N'45'iters\fR=\fIN\fR
Fail if output of formatting does not stabilize within \fIN\fR iterations\N'46' May be set in \fB\N'46'ocamlformat\fR\N'46' The default value is \fB10\fR\N'46'
.TP 4
\fB\N'45'\N'45'name\fR=\fINAME\fR
Name of input file for use in error reporting and starting point when searching for \N'39'\N'46'ocamlformat\N'39' files\N'46' Defaults to the input file name\N'46' Some options can be specified in configuration files named \N'39'\N'46'ocamlformat\N'39' in the same or a parent directory of \fINAME\fR, see documentation of other options for details\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'comment\N'45'check\fR
Unset \fBcomment\N'45'check\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'quiet\fR
Unset \fBquiet\fR\N'46'
.TP 4
\fB\N'45'\N'45'no\N'45'version\N'45'check\fR
Do not check that the version matches the one specified in \N'46'ocamlformat\N'46'
.TP 4
\fB\N'45'\N'45'numeric\fR=\fIX\N'45'Y\fR
Instead of re\N'45'formatting the file, output one integer per line corresponding to the indentation value, printing as many values as lines in the range between lines X and Y (included)\N'46'
.TP 4
\fB\N'45'o\fR \fIDST\fR, \fB\N'45'\N'45'output\fR=\fIDST\fR
Output file\N'46' Mutually exclusive with \N'45'\N'45'inplace\N'46' Write to stdout if omitted\N'46'
.TP 4
\fB\N'45'\N'45'ocp\N'45'indent\N'45'config\fR
Read \N'46'ocp\N'45'indent configuration files\N'46' \fBbase\fR is an alias for \fBlet\N'45'binding\N'45'indent\fR\N'46' \fBtype\fR is an alias for \fBtype\N'45'decl\N'45'indent\fR\N'46' \fBin\fR is an alias for \fBindent\N'45'after\N'45'in\fR\N'46' \fBwith\fR sets \fBfunction\N'45'indent\fR and \fBmatch\N'45'indent\fR\N'46' \fBmatch_clause\fR is an alias for \fBcases\N'45'exp\N'45'indent\fR\N'46' \fBppx_stritem_ext\fR is an alias for \fBstritem\N'45'extension\N'45'indent\fR\N'46' \fBmax_indent\fR is an alias for \fBmax\N'45'indent\fR\N'46' \fBstrict_with\fR sets \fBfunction\N'45'indent\N'45'nested\fR and \fBmatch\N'45'indent\N'45'nested\fR\N'46'
.TP 4
\fB\N'45'p\fR \fI{conventional|default|compact|sparse|ocamlformat|janestreet}\fR, \fB\N'45'\N'45'profile\fR=\fI{conventional|default|compact|sparse|ocamlformat|janestreet}\fR
Select a preset profile which sets \fIall\fR options, overriding lower priority configuration\N'46' The \fBconventional\fR profile aims to be as familiar and "conventional" appearing as the available options allow\N'46' \fBdefault\fR is an alias for the \fBconventional\fR profile\N'46' The \fBcompact\fR profile is similar to \fBocamlformat\fR but opts for a generally more compact code style\N'46' The \fBsparse\fR profile is similar to \fBocamlformat\fR but opts for a generally more sparse code style\N'46' The \fBocamlformat\fR profile aims to take advantage of the strengths of a parsetree\N'45'based auto\N'45'formatter, and to limit the consequences of the weaknesses imposed by the current implementation\N'46' This is a style which optimizes for what the formatter can do best, rather than to match the style of any existing code\N'46' General guidelines that have directed the design include: Legibility, in the sense of making it as hard as possible for quick visual parsing to give the wrong interpretation, is of highest priority; Whenever possible the high\N'45'level structure of the code should be obvious by looking only at the left margin, in particular, it should not be necessary to visually jump from left to right hunting for critical keywords, tokens, etc; All else equal compact code is preferred as reading without scrolling is easier, so indentation or white space is avoided unless it helps legibility; Attention has been given to making some syntactic gotchas visually obvious\N'46' The \fBjanestreet\fR profile is used at Jane Street\N'46' The default value is \fBdefault\fR\N'46'
.TP 4
\fB\N'45'\N'45'print\N'45'config\fR
Print the configuration determined by the environment variable, the configuration files, preset profiles and command line\N'46' Attributes are not considered\N'46' If many input files are specified, only print the configuration for the first file\N'46' If no input file is specified, print the configuration for the root directory if specified, or for the current working directory otherwise\N'46'
.TP 4
\fB\N'45'q\fR, \fB\N'45'\N'45'quiet\fR
Quiet\N'46' May be set in \fB\N'46'ocamlformat\fR\N'46' The flag is \fBunset\fR by default\N'46'
.TP 4
\fB\N'45'\N'45'root\fR=\fIDIR\fR
Root of the project\N'46' If specified, only take into account \N'46'ocamlformat configuration files inside \fIDIR\fR and its subdirectories\N'46'
.TP 4
\fB\N'45'\N'45'use\N'45'file\fR
Deprecated\N'46' Same as \fBimpl\fR\N'46'
.TP 4
\fB\N'45'\N'45'version\fR
Show version information\N'46'
.TP 4
\fISRC\fR
Input files\N'46' At least one is required, and exactly one without \fB\N'45'\N'45'inplace\fR\N'46' If \fB\N'45'\fR is passed, will read from stdin\N'46'
.SH ENVIRONMENT
.P
These environment variables affect the execution of \fBocamlformat\fR:
.TP 4
\fBOCAMLFORMAT\fR
See option \fB\N'45'\N'45'config\fR\N'46'