.TH "Random.State" 3 2022-01-28 OCamldoc "OCaml library"
.SH NAME
Random.State \- no description
.SH Module
Module   Random.State
.SH Documentation
.sp
Module
.BI "State"
 : 
.B sig end

.sp

.sp

.sp
.sp
.I type t 

.sp
The type of PRNG states\&.

.sp

.I val make 
: 
.B int array -> t
.sp
Create a new state and initialize it with the given seed\&.

.sp

.I val make_self_init 
: 
.B unit -> t
.sp
Create a new state and initialize it with a system\-dependent
low\-entropy seed\&.

.sp

.I val copy 
: 
.B t -> t
.sp
Return a copy of the given state\&.

.sp

.I val bits 
: 
.B t -> int
.sp

.sp

.I val int 
: 
.B t -> int -> int
.sp

.sp

.I val full_int 
: 
.B t -> int -> int
.sp

.sp

.I val int32 
: 
.B t -> Int32.t -> Int32.t
.sp

.sp

.I val nativeint 
: 
.B t -> Nativeint.t -> Nativeint.t
.sp

.sp

.I val int64 
: 
.B t -> Int64.t -> Int64.t
.sp

.sp

.I val float 
: 
.B t -> float -> float
.sp

.sp

.I val bool 
: 
.B t -> bool
.sp
These functions are the same as the basic functions, except that they
use (and update) the given PRNG state instead of the default one\&.

.sp
