type token =
  | EOF
  | EOL
  | SPACE
  | SNAMESERVER
  | DOT
  | COLON
  | IPV4 of (string)
  | IPV6 of (string)

open Parsing;;
let _ = parse_error;;
# 2 "resolvconf/resolvconf_parser.mly"
# 15 "resolvconf/resolvconf_parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* EOL *);
  258 (* SPACE *);
  259 (* SNAMESERVER *);
  260 (* DOT *);
  261 (* COLON *);
    0|]

let yytransl_block = [|
  262 (* IPV4 *);
  263 (* IPV6 *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\004\000\005\000\006\000\
\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\003\000\001\000\002\000\001\000\001\000\
\003\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\011\000\000\000\001\000\003\000\000\000\000\000\
\005\000\000\000\004\000\006\000\007\000\008\000\009\000\010\000"

let yydgoto = "\002\000\
\003\000\004\000\008\000\010\000\015\000\016\000"

let yysindex = "\002\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\255\005\255\
\000\000\254\254\000\000\000\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 260
let yytable = "\012\000\
\005\000\009\000\001\000\013\000\014\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\000\000\007\000"

let yycheck = "\002\001\
\000\000\002\001\001\000\006\001\007\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001"

let yynames_const = "\
  EOF\000\
  EOL\000\
  SPACE\000\
  SNAMESERVER\000\
  DOT\000\
  COLON\000\
  "

let yynames_block = "\
  IPV4\000\
  IPV6\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lines) in
    Obj.repr(
# 18 "resolvconf/resolvconf_parser.mly"
                      ( List.rev _1 )
# 148 "resolvconf/resolvconf_parser.ml"
               : [ `Nameserver of Ipaddr.t ] list))
; (fun __caml_parser_env ->
    Obj.repr(
# 21 "resolvconf/resolvconf_parser.mly"
                ( [] )
# 154 "resolvconf/resolvconf_parser.ml"
               : 'lines))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lines) in
    Obj.repr(
# 22 "resolvconf/resolvconf_parser.mly"
             ( _1 )
# 161 "resolvconf/resolvconf_parser.ml"
               : 'lines))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lines) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nameserver) in
    Obj.repr(
# 23 "resolvconf/resolvconf_parser.mly"
                        ( _2 :: _1 )
# 169 "resolvconf/resolvconf_parser.ml"
               : 'lines))
; (fun __caml_parser_env ->
    Obj.repr(
# 25 "resolvconf/resolvconf_parser.mly"
         ()
# 175 "resolvconf/resolvconf_parser.ml"
               : 's))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 's) in
    Obj.repr(
# 25 "resolvconf/resolvconf_parser.mly"
                      ()
# 182 "resolvconf/resolvconf_parser.ml"
               : 's))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 27 "resolvconf/resolvconf_parser.mly"
           ( Ipaddr.V4.of_string_exn _1 )
# 189 "resolvconf/resolvconf_parser.ml"
               : 'ipv4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 29 "resolvconf/resolvconf_parser.mly"
           ( Ipaddr.V6.of_string_exn _1 )
# 196 "resolvconf/resolvconf_parser.ml"
               : 'ipv6))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 's) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ipv4) in
    Obj.repr(
# 32 "resolvconf/resolvconf_parser.mly"
                    ( `Nameserver (Ipaddr.V4 _3) )
# 204 "resolvconf/resolvconf_parser.ml"
               : 'nameserver))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 's) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ipv6) in
    Obj.repr(
# 33 "resolvconf/resolvconf_parser.mly"
                      ( `Nameserver (Ipaddr.V6 _3) )
# 212 "resolvconf/resolvconf_parser.ml"
               : 'nameserver))
(* Entry resolvconf *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let resolvconf (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : [ `Nameserver of Ipaddr.t ] list)
